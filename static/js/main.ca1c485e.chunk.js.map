{"version":3,"sources":["components/Calendar/Topbar.js","components/Calendar/Calendar.js","mock/events.js","models/CalendarModel.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","Topbar","observer","CalendarModel","classes","btnDay","view","current","btnWeek","btnMonth","ButtonGroup","color","Button","className","onClick","setDayView","setWeekView","setMonthView","paper","overflow","Calendar","ToolbarAddition","useCallback","FlexibleSpace","dateNow","Date","getTime","Paper","data","defaultCurrentDate","onCommitChanges","added","changed","deleted","addEvent","changeEvent","deleteEvent","flexibleSpaceComponent","getCurrentView","showOpenButton","showDeleteButton","events","title","startDate","endDate","allDay","id","defaultViewProps","startDayHour","endDayHour","cellDuration","day","week","month","makeAutoObservable","this","deep","setData","event","newEvent","Object","assign","map","filter","e","app","height","padding","display","flexDirection","App","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca1c485e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: \"#e7e7e7\"\r\n    }\r\n}));\r\n\r\nexport const Topbar = observer(({CalendarModel}) => {\r\n    const classes = useStyles();\r\n\r\n    const btnDay = CalendarModel.view.current === \"day\" ? classes.root : \"\"\r\n    const btnWeek = CalendarModel.view.current === \"week\" ? classes.root : \"\"\r\n    const btnMonth = CalendarModel.view.current === \"month\" ? classes.root : \"\"\r\n\r\n    return (\r\n        <ButtonGroup color=\"primary\">\r\n            <Button className={btnDay}\r\n                    onClick={() => CalendarModel.setDayView()}>\r\n                Day\r\n            </Button>\r\n            <Button className={btnWeek}\r\n                    onClick={() => CalendarModel.setWeekView()}>\r\n                Week\r\n            </Button>\r\n            <Button className={btnMonth}\r\n                    onClick={() => CalendarModel.setMonthView()}>\r\n                Month\r\n            </Button>\r\n        </ButtonGroup>\r\n    );\r\n});\r\n\r\n\r\n","import * as React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {EditingState, IntegratedEditing, ViewState} from '@devexpress/dx-react-scheduler';\r\nimport {\r\n    AppointmentForm,\r\n    Appointments,\r\n    AppointmentTooltip,\r\n    ConfirmationDialog,\r\n    DateNavigator,\r\n    Scheduler,\r\n    TodayButton,\r\n    Toolbar,\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\n\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nimport {Topbar} from \"./Topbar\";\r\nimport {useCallback} from \"react\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        overflow: 'auto'\r\n    }\r\n}));\r\n\r\nexport const Calendar = observer(({CalendarModel}) => {\r\n    const classes = useStyles()\r\n\r\n    const commitChanges = ({added, changed, deleted}) => {\r\n        if (added) CalendarModel.addEvent(added)\r\n        if (changed) CalendarModel.changeEvent(changed)\r\n        if (deleted) CalendarModel.deleteEvent(deleted)\r\n    }\r\n\r\n    const ToolbarAddition = useCallback(() => (\r\n        <Toolbar.FlexibleSpace>\r\n            <Topbar CalendarModel={CalendarModel}/>\r\n        </Toolbar.FlexibleSpace>\r\n    ), [])\r\n\r\n    const dateNow = new Date().getTime()\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <Scheduler data={CalendarModel.data}>\r\n                <ViewState defaultCurrentDate={dateNow}/>\r\n                <EditingState onCommitChanges={commitChanges}/>\r\n                <IntegratedEditing/>\r\n                <Toolbar flexibleSpaceComponent={ToolbarAddition}/>\r\n                <DateNavigator/>\r\n                <TodayButton/>\r\n\r\n                {CalendarModel.getCurrentView}\r\n\r\n                <ConfirmationDialog/>\r\n                <Appointments/>\r\n                <AppointmentTooltip showOpenButton showDeleteButton/>\r\n                <AppointmentForm/>\r\n            </Scheduler>\r\n        </Paper>\r\n    );\r\n});","export const events = [\r\n    {\r\n        title: \"Create Icons for Website\",\r\n        startDate: new Date(2020, 11, 6),\r\n        endDate: new Date(2020, 11, 8),\r\n        allDay: true,\r\n        id: 1,\r\n    }, {\r\n        title: 'Google AdWords Strategy',\r\n        startDate: new Date(2020, 11, 7, 0, 0),\r\n        endDate: new Date(2020, 11, 8, 10, 30),\r\n        id: 2,\r\n    }, {\r\n        title: 'Rollout of New Website and Marketing Brochures',\r\n        startDate: new Date(2020, 11, 10, 10, 0),\r\n        endDate: new Date(2020, 11, 10, 14, 30),\r\n        id: 3,\r\n    }, {\r\n        title: 'Update NDA Agreement',\r\n        startDate: new Date(2020, 11, 10, 16, 0),\r\n        endDate: new Date(2020, 11, 10, 18, 30),\r\n        id: 4,\r\n    }, {\r\n        title: 'Customer Workshop',\r\n        startDate: new Date(2020, 11, 11, 0, 0),\r\n        endDate: new Date(2020, 11, 15, 10, 30),\r\n        allDay: true,\r\n        id: 5,\r\n    }, {\r\n        title: 'Submit New Website Design',\r\n        startDate: new Date(2020, 11, 8, 14, 0),\r\n        endDate: new Date(2020, 11, 8, 16, 0),\r\n        allDay: true,\r\n        id: 6,\r\n    },\r\n]","import {makeAutoObservable} from \"mobx\";\r\nimport {\r\n    DayView,\r\n    MonthView,\r\n    WeekView} from \"@devexpress/dx-react-scheduler-material-ui\";\r\n\r\nimport {events} from '../mock/events'\r\n\r\nconst defaultViewProps = {\r\n    startDayHour: 0,\r\n    endDayHour: 24,\r\n    cellDuration: 60\r\n}\r\n\r\nclass CalendarModel {\r\n    data = []\r\n\r\n    view = {\r\n        current: \"week\",\r\n        day: () => <DayView {...defaultViewProps}/>,\r\n        week: () => <WeekView {...defaultViewProps}/>,\r\n        month: () => <MonthView {...defaultViewProps}/>,\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this, {},{deep:true})\r\n        this.setData(events)\r\n    }\r\n\r\n    setData(data) {\r\n        this.data = data\r\n    }\r\n\r\n    setDayView() {\r\n        this.view.current = \"day\"\r\n    }\r\n\r\n    setWeekView() {\r\n        this.view.current = \"week\"\r\n    }\r\n\r\n    setMonthView() {\r\n        this.view.current = \"month\"\r\n    }\r\n\r\n    addEvent(event) {\r\n        const newEvent = Object.assign({id: new Date().getTime()}, event)\r\n        this.data = [...this.data, newEvent]\r\n    }\r\n\r\n    changeEvent(changed) {\r\n        this.data = this.data.map(event => (\r\n            changed[event.id] ? {...event, ...changed[event.id]} : event))\r\n    }\r\n\r\n    deleteEvent(id) {\r\n        this.data = this.data.filter(e => e.id !== id)\r\n    }\r\n\r\n    get getCurrentView() {\r\n        return this.view[this.view.current]()\r\n    }\r\n}\r\n\r\nexport default new CalendarModel()\r\n","import {Calendar} from \"./components/Calendar/Calendar\";\n\nimport CalendarModel from \"./models/CalendarModel\";\n\nconst app = {\n    height: \"100%\",\n    padding: \"10px\",\n    display: 'flex',\n    flexDirection: 'column'\n}\n\nfunction App() {\n    return (\n        <div style={app}>\n            <Calendar CalendarModel={CalendarModel}/>\n        </div>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}